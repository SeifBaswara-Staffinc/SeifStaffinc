function myFunction() {
  const AIRTABLE_TOKEN_ID = 'patTcyeGADERsq7Oc.de437ceaa43b0793c74fda16185f797f827ba7043ef4e5d5e9a4ce804a70b07b';
  const AIRTABLE_BASE_ID = 'apppnxiM0rEHvsurx';
  const AIRTABLE_TABLE_NAME = 'tblNohpxhsWecjWbM';
  const AIRTABLE_API_URL = 'https://api.airtable.com/v0';
  let spreadSheetData = [];
  let airTableData = [];

  function getSpreadSheetData() {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const data = sheet.getDataRange().getValues();
    const headers = data[1];

    for (let i = 2; i < data.length; i++) {
      let row = data[i];
      let record = {};

      for (let j = 0; j < 4; j++) {
        record[headers[j]] = row[j];
      }

      spreadSheetData.push(record);
    }
  }

  function getAirtableRecordData() {
    var offset = '';
    const url = `${AIRTABLE_API_URL}/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;

    do {
      var fullUrl = offset ? `${url}?offset=${encodeURIComponent(offset)}` : url;

      const options = {
        method: 'get',
        headers: {
          Authorization: `Bearer ${AIRTABLE_TOKEN_ID}`,
        },
        muteHttpExceptions: true,
      };

      const response = UrlFetchApp.fetch(fullUrl, options);
      const result = JSON.parse(response.getContentText());

      if (result && result.records && Array.isArray(result.records)) {
        airTableData = airTableData.concat(result.records);

        offset = result.offset || '';
      } else {
          Logger.log("No records found in the current response.");
          break;
      }
    } while (offset);

    processAirTableData();
  }

  function processAirTableData() {
    airTableData.forEach(airTable => {
      const data = spreadSheetData.find(item => item.Email == airTable.fields.Email);

      if (!data) {
        deleteAirTableData(airTable.id);

        return;
      }

      if (data) {
        const payload = {
          "fields": {
            "Name": data.Nama_Lengkap,
            "Email": data.Email,
            "Department": data.Department,
            "Join Date": data.Join_Date
          }
        }
        updateAirTableData(airTable.id, payload);
        
        return;
      }
    });  
  }

  function updateAirTableData(id, payload) {
    const url = `${AIRTABLE_API_URL}/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}/${id}`;

    const options = {
      method: 'patch',
      contentType: 'application/json',
      headers: {
        Authorization: `Bearer ${AIRTABLE_TOKEN_ID}`,
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
    } catch (e) {
      Logger.log(e)
    }
  }

  function deleteAirTableData(id) {
    const url = `${AIRTABLE_API_URL}/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}/${id}`;

    const options = {
      method: 'delete',
      contentType: 'application/json',
      headers: {
        Authorization: `Bearer ${AIRTABLE_TOKEN_ID}`,
      },
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      Logger.log(JSON.parse(response));
    } catch (e) {
      Logger.log(e)
    }
  }

  function getRecordToAirTable() {
    const airTableEmails = new Set(airTableData.map(record => record.fields.Email));

    const filteredSpreadsheetData = spreadSheetData.filter(
      record => !airTableEmails.has(record.Email) && record.Email != ''
    );

    if (filteredSpreadsheetData.length > 0) {
      createAirTableData(filteredSpreadsheetData);
    }
  }

  function createAirTableData(data) {
    const url = `${AIRTABLE_API_URL}/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_NAME}`;

    const payload = {
      "records": data.map(entry => ({
          fields: {
            "Email": entry.Email,
            "Join Date": entry.Join_Date,
            "Name": entry.Nama_Lengkap,
            "Department": entry.Department
          }
        }))
    }

    const options = {
      method: 'post',
      contentType: 'application/json',
      headers: {
        Authorization: `Bearer ${AIRTABLE_TOKEN_ID}`,
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
    };

    try {
      const response = UrlFetchApp.fetch(url, options);
      Logger.log(JSON.parse(response));
    } catch (e) {
      Logger.log(e)
    }
  }

  getSpreadSheetData();
  getAirtableRecordData();
  getRecordToAirTable();
}
mm
